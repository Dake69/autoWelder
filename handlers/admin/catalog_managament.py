from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bson import ObjectId
import aiogram


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.catalog import *

from keyboards.admin import *

from FSM.all import *

router = Router()

@router.callback_query(F.data == "add_category")
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    await state.set_state(AddCategoryState.waiting_for_category_name)
    await callback.answer()

@router.message(AddCategoryState.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    category_name = message.text.strip()
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    category_id = await create_category(name=category_name)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{category_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {category_id}")

    await state.clear()


@router.callback_query(F.data == "list_categories")
async def list_categories_handler(callback: CallbackQuery, state: FSMContext):
    categories = await get_all_categories()
    if not categories:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return

    per_page = 6
    page = 1
    total_pages = (len(categories) + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    current_categories = categories[start:end]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category["name"], callback_data=f"manage_category_{category['_id']}")]
        for category in current_categories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"categories_page_{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"categories_page_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    await callback.message.edit_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:", reply_markup=keyboard)
    await state.set_state(ListCategoriesState.viewing_categories)
    await callback.answer()

@router.callback_query(F.data.startswith("categories_page_"), ListCategoriesState.viewing_categories)
async def paginate_categories(callback: CallbackQuery, state: FSMContext):
    categories = await get_all_categories()
    if not categories:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return

    page = int(callback.data.split("_")[-1])
    per_page = 6
    total_pages = (len(categories) + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    current_categories = categories[start:end]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category["name"], callback_data=f"manage_category_{category['_id']}")]
        for category in current_categories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"categories_page_{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"categories_page_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    await callback.message.edit_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("manage_category_"), ListCategoriesState.viewing_categories)
async def manage_category_handler(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split("_")[-1]
    
    try:
        category_id = ObjectId(category_id)
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return

    category = await get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f"edit_category_{category['_id']}")],
        [InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data=f"delete_category_{category['_id']}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_categories")]
    ])
    await callback.message.edit_text(
        f"üìÇ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é:\n\n"
        f"–ù–∞–∑–≤–∞: {category['name']}\n"
        f"ID: {category['_id']}",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_category_"))
async def start_edit_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split("_")[-1]

    try:
        category_id = ObjectId(category_id)
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return
    
    await state.update_data(category_id=category_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    await state.set_state(EditCategoryState.waiting_for_new_name)
    await callback.answer()

@router.message(EditCategoryState.waiting_for_new_name)
async def process_edit_category_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    category_id = data["category_id"]

    try:
        updated_count = await update_category(category_id=category_id, name=new_name)
        if updated_count:
            await message.answer(f"‚úÖ –ù–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'.")
        else:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–∞–∑–≤–∞ –Ω–µ –∑–º—ñ–Ω–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

    await state.clear()

@router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_handler(callback: CallbackQuery):
    category_id = callback.data.split("_")[-1]

    try:
        category_id = ObjectId(category_id)
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return
    
    deleted_count = await delete_category(category_id=category_id)
    if deleted_count:
        await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
    await callback.answer()

@router.callback_query(F.data == "add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AddProductState.waiting_for_name)
    await callback.answer()

@router.message(AddProductState.waiting_for_name)
async def process_product_name(message: Message, state: FSMContext):
    product_name = message.text.strip()
    if not product_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(name=product_name)

    categories = await get_all_categories()
    if not categories:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        await state.clear()
        return

    per_page = 6
    page = 1
    total_pages = (len(categories) + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    current_categories = categories[start:end]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category["name"], callback_data=f"select_category_{category['_id']}")]
        for category in current_categories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"categories_page_{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"categories_page_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_add_product")])

    await message.answer("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É:", reply_markup=keyboard)
    await state.set_state(AddProductState.waiting_for_category)

@router.callback_query(F.data.startswith("categories_page_"), AddProductState.waiting_for_category)
async def paginate_categories(callback: CallbackQuery, state: FSMContext):
    categories = await get_all_categories()
    if not categories:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        await state.clear()
        return

    page = int(callback.data.split("_")[-1])
    per_page = 6
    total_pages = (len(categories) + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    current_categories = categories[start:end]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category["name"], callback_data=f"select_category_{category['_id']}")]
        for category in current_categories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"categories_page_{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"categories_page_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_add_product")])

    await callback.message.edit_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("select_category_"), AddProductState.waiting_for_category)
async def process_product_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split("_")[-1]
    try:
        category_id = ObjectId(category_id)
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return

    category = await get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    await state.update_data(category_id=str(category_id))
    await callback.message.edit_text("üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ 123.45):")
    await state.set_state(AddProductState.waiting_for_price)
    await callback.answer()

@router.message(AddProductState.waiting_for_price)
async def process_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏. –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(price=price)
    await message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ:")
    await state.set_state(AddProductState.waiting_for_stock)

@router.message(AddProductState.waiting_for_stock)
async def process_product_stock(message: Message, state: FSMContext):
    try:
        stock = int(message.text.strip())
        if stock < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(stock=stock)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':")
    await state.set_state(AddProductState.waiting_for_description)

@router.message(AddProductState.waiting_for_description)
async def process_product_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")
        return

    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        description = ""
    else:
        description = message.text.strip()

    await state.update_data(description=description)
    await message.answer("üñºÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':")
    await state.set_state(AddProductState.waiting_for_photo)

@router.message(AddProductState.waiting_for_photo)
async def process_product_photo(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        photo = None
    elif message.photo:
        photo = message.photo[-1].file_id
    else:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")
        return

    await state.update_data(photo=photo)

    data = await state.get_data()
    product_id = await create_product(
        name=data["name"],
        category_id=data["category_id"],
        price=data["price"],
        stock=data["stock"],
        description=data["description"],
        photo=data["photo"]
    )

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{data['name']}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {product_id}")
    await state.clear()

@router.callback_query(F.data == "list_products")
async def list_products_by_category(callback: CallbackQuery):
    categories = await get_all_categories()
    if not categories:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category["name"], callback_data=f"view_products_{str(category['_id'])}_1")]
        for category in categories
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    try:
        await callback.message.edit_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤:", reply_markup=keyboard)
    except aiogram.exceptions.TelegramBadRequest:
        await callback.message.delete()
        await callback.message.answer("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤:", reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data.startswith("view_products_"))
async def view_products_in_category(callback: CallbackQuery):
    data = callback.data.split("_")
    category_id = data[2]
    page = int(data[3])

    try:
        category_id = ObjectId(category_id)
    except Exception:
        await callback.message.edit_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await callback.answer()
        return

    products = await get_products_by_category(str(category_id))
    if not products:
        await callback.message.edit_text("‚ùå –£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        await callback.answer()
        return

    per_page = 6
    start = (page - 1) * per_page
    end = start + per_page
    current_products = products[start:end]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=product["name"], callback_data=f"product_{str(product['_id'])}")]
        for product in current_products
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_products_{str(category_id)}_{page - 1}"))
    if end < len(products):
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"view_products_{str(category_id)}_{page + 1}"))
    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_products")])

    response = f"üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}):\n\n"
    for product in current_products:
        response += (
            f"üîπ <b>{product['name']}</b>\n"
            f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
            f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {product['stock']}\n\n"
        )

    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def view_product_details(callback: CallbackQuery):
    product_id = callback.data.split("_")[-1]
    product = await get_product_by_id(product_id)
    if not product:
        await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    response = (
        f"üîπ <b>{product['name']}</b>\n"
        f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
        f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {product['stock']}\n"
        f"üìù –û–ø–∏—Å: {product['description']}\n"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"edit_product_{str(product['_id'])}")],
        [InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{str(product['_id'])}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_products")]
    ])

    if product.get("photo"):
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=product["photo"],
            caption=response,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            text=response,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data.startswith("edit_product_"))
async def start_edit_product(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.
    """
    product_id = callback.data.split("_")[-1]
    product = await get_product_by_id(product_id)
    if not product:
        await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    await state.update_data(product_id=product_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="–¶—ñ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="edit_field_stock")],
        [InlineKeyboardButton(text="–û–ø–∏—Å", callback_data="edit_field_description")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="edit_field_photo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")]
    ])

    try:
        await callback.message.edit_text("üõ†Ô∏è –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    except aiogram.exceptions.TelegramBadRequest:
        await callback.message.delete()
        await callback.message.answer("üõ†Ô∏è –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)

    await state.set_state(EditProductState.waiting_for_field)
    await callback.answer()

@router.callback_query(EditProductState.waiting_for_field)
async def choose_field_to_edit(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[-1]
    await state.update_data(field=field)

    if field == "photo":
        await callback.message.edit_text("üñºÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É:")
    else:
        await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—è:")

    await state.set_state(EditProductState.waiting_for_new_value)
    await callback.answer()

@router.message(EditProductState.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    product_id = data["product_id"]
    field = data["field"]

    if field == "photo":
        if not message.photo:
            await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
            return
        new_value = message.photo[-1].file_id
    else:
        new_value = message.text.strip()
        if not new_value:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

    updated_count = await update_product(product_id=product_id, **{field: new_value})
    if updated_count:
        await message.answer(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä.")

    await state.clear()

@router.callback_query(F.data.startswith("delete_product_"))
async def delete_product(callback: CallbackQuery):
    product_id = callback.data.split("_")[-1]
    try:
        deleted_count = await delete_product_by_id(product_id)
        try:
            if deleted_count:
                await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ–º–∞—î.")
        except aiogram.exceptions.TelegramBadRequest:
            await callback.message.delete()
            if deleted_count:
                await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ–º–∞—î.")
    except Exception as e:
        try:
            await callback.message.edit_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        except aiogram.exceptions.TelegramBadRequest:   
            await callback.message.delete()
            await callback.message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

    await callback.answer()