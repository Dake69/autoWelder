from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import *

from FSM.all import BroadcastForm

from database.users import users_collection
from database.catalog import category_collection, product_collection

from keyboards.admin import stats_keyboard, create_admin_panel_keyboard, create_categories_keyboard, create_products_keyboard, keyboard_special_functions

router = Router()

@router.message(Command('admin'))
async def admin_panel(message: Message):
    for admin in MAIN_ADMINS:
        if message.from_user.id == admin:
            await message.answer(
            "üëÆ‚Äç‚ôÇÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
            reply_markup=create_admin_panel_keyboard()
            )
            return
    else:
        await message.answer(
            "‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."
        )

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_panel(callback: CallbackQuery):
    if callback.data == "admin_stats":

        users_count = await users_collection.count_documents({})
        categories_count = await category_collection.count_documents({})
        products_count = await product_collection.count_documents({})

        await callback.message.edit_text(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b> {users_count}\n"
            f"üìÇ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:</b> {categories_count}\n"
            f"üì¶ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤:</b> {products_count}",
            reply_markup=stats_keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    elif callback.data == "admin_categories":
        await callback.message.edit_text(
            "üìÇ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:",
            reply_markup=create_categories_keyboard()
        )
    elif callback.data == "admin_products":
        await callback.message.edit_text(
            "üì¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=create_products_keyboard()
        )
    elif callback.data == "admin_settings":
        await callback.message.answer("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: \n- –û–ø—Ü—ñ—è 1\n- –û–ø—Ü—ñ—è 2\n...")
    elif callback.data == "admin_exit":
        await callback.message.answer("üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
    elif callback.data == "admin_special_functions":
        await callback.message.edit_text(
            "üîß –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:",
            reply_markup=keyboard_special_functions
        )
    elif callback.data == "admin_back":
        await callback.message.edit_text(
            "üëÆ‚Äç‚ôÇÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
            reply_markup=create_admin_panel_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "broadcast_message")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastForm.message)
    await callback.message.edit_text(
        "üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(BroadcastForm.message)
async def process_broadcast(message: Message, state: FSMContext):
    await state.clear()
    broadcast_text = message.text

    users = await users_collection.find().to_list(length=None)

    if not users:
        await message.answer("‚ùå <b>–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.</b>", parse_mode="HTML")
        return

    sent_count = 0
    failed_count = 0

    for user in users:
        try:
            await message.bot.send_message(chat_id=user["user_id"], text=broadcast_text)
            sent_count += 1
        except Exception:
            failed_count += 1

    await message.answer(
        f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
        f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {failed_count}",
        parse_mode="HTML",
    )