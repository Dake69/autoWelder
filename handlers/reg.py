import datetime

from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


from FSM.all import Registration

from keyboards.reg import create_regions_inline_keyboard, keyboard_to_main

from database.users import save_user, get_user

from config import *

router = Router()

@router.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:
        await message.answer(
            f"üëã –í—ñ—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥, {user['full_name']}! üöó\n\n"
            "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à–æ–º—É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω. üõ†Ô∏è\n"
            f"üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user['phone_number']}\n"
            f"üìç –í–∞—à–∞ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è: {user['region']}\n\n"
            "üõí –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω!",
            reply_markup=keyboard_to_main
        )
        return

    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω! üöó\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.\n"
        "üìã –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë):"
    )
    await state.set_state(Registration.full_name)

@router.message(Registration.full_name)
async def ask_phone_number(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)

    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=contact_keyboard
    )
    await state.set_state(Registration.phone_number)


@router.message(Registration.phone_number, F.contact)
async def ask_region(message: Message, state: FSMContext):
    if message.contact and message.contact.phone_number:
        await state.update_data(phone_number=message.contact.phone_number)

        regions_keyboard = create_regions_inline_keyboard(page=1)
        await message.answer(
            "üìç –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å, —É —è–∫—ñ–π –≤–∏ –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ:",
            reply_markup=regions_keyboard
        )
        await state.set_state(Registration.region)
    else:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

@router.callback_query(F.data.startswith("page_") | F.data.startswith("r_"))
async def handle_region_pagination(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("page_"):
        page = int(callback.data.split("_")[1])
        keyboard = create_regions_inline_keyboard(page=page)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    elif callback.data.startswith("r_"):
        region_index = int(callback.data.split("_")[1]) - 1
        regions = [
            "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–í–æ–ª–∏–Ω—Å—å–∫–∞", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", "–î–æ–Ω–µ—Ü—å–∫–∞",
            "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞",
            "–ö–∏—ó–≤—Å—å–∫–∞", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞", "–õ—É–≥–∞–Ω—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞",
            "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞",
            "–°—É–º—Å—å–∫–∞", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞",
            "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞"
        ]
        selected_region = regions[region_index]
        await state.update_data(region=selected_region)


        user_data = await state.get_data()


        try:
            await save_user(callback.from_user.id,
                               full_name=user_data['full_name'],
                               phone_number=user_data['phone_number'],
                               region=user_data['region'])
        except Exception as e:
            await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return


        await callback.message.edit_text(
            f"üéâ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, {user_data['full_name']}! üõ†Ô∏è\n\n"
            f"üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_data['phone_number']}\n"
            f"üìç –í–∞—à–∞ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è: {user_data['region']}\n\n"
            "üõí –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω!",
            reply_markup=keyboard_to_main
        )
        await state.clear()
        await callback.answer()